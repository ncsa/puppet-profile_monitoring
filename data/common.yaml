---
# COMMENTED OUT PARAMETERS NEED TO BE SET ELSEWHERE TO ENABLE AND CONFIGURE TELEGRAF
lookup_options:
  profile_monitoring::telegraf::inputs_extra:
    merge:
      strategy: "deep"
      merge_hash_arrays: true
  profile_monitoring::telegraf::input_extra_scripts:
    merge:
      strategy: "deep"
      merge_hash_arrays: true
  profile_monitoring::telegraf::outputs:
    merge:
      strategy: "deep"
      merge_hash_arrays: true
  profile_monitoring::telegraf::required_pkgs:
    merge:
      strategy: "deep"
#anchors:
#  - &telegraf_outputs_influxdb_common
#    database: "PROJECT_NAME"
#    username: "USERNAME__write"
#    password: "PASSWORD"
#    insecure_skip_verify: false
#    skip_database_creation: true
profile_monitoring::telegraf::config_dirs:
  "/etc/telegraf": {}
  "/etc/telegraf/scripts": {}
profile_monitoring::telegraf::config_dirs_default_group: "telegraf"
profile_monitoring::telegraf::config_dirs_default_mode: "0750"
profile_monitoring::telegraf::config_dirs_default_owner: "root"
profile_monitoring::telegraf::enabled: false
profile_monitoring::telegraf::inputs_extra:
  exec:
    mount-state:
      command: "/etc/telegraf/scripts/mount-state.sh"
      data_format: "influx"
      interval: "1m"
      timeout: "30s"
    ncsa_inventory:
      command: "/etc/telegraf/scripts/ncsa_inventory.sh"
      data_format: "influx"
      interval: "168h"
      timeout: "5m"
profile_monitoring::telegraf::inputs_extra_scripts:
  "/etc/telegraf/scripts/mount-state.sh":
    content: |
      #!/bin/bash
      KNOWN_RO_MOUNTS=("/sys/fs/cgroup")
      #KNOWN_RO_MOUNTS=("/sys/fs/cgroup" "/path/2" "/path/3") # Syntax for >1 paths (can delimit w/ newline too)
      ro_mounts=$(findmnt -O ro -n --list -t noiso9660)
      host=$(hostname -f)
      if [ -z "$ro_mounts" ]; then
        exit 0
      fi
      while read -r line
      do
        read target src fstype options <<< "$line"
        #echo "Target=$target:Source=$src:fstype=$fstype:Options=$options"
        if [[ -z "$target" || -z "$src" || -z "$fstype" || -z "$options" ]]; then
          #echo "Something not defined, generate an alert"
          echo "mount-state,nodeName=$host,mount=ERRORPLACEHOLDER,src=ERRORPLACEHOLDER mountState=1"
          continue
        fi
        # Ignore filesystems known to be ro
        for RO_MOUNT in "${KNOWN_RO_MOUNTS[@]}"; do
          if [[ "$target" == "$RO_MOUNT" ]]; then
            continue 2 # continue back to outer while loop
          fi
        done
        echo "mount-state,nodeName=$host,mount=$target,source=$src mountState=1"
      done <<< "$ro_mounts"
  "/etc/telegraf/scripts/ncsa_inventory.sh":
    source: "puppet:///modules/profile_monitoring/misc/ncsa_inventory.sh"

profile_monitoring::telegraf::ipmi_sensor_plugin_enabled: true
profile_monitoring::telegraf::ipmi_sensor_telegraf_plugin_options:
  path: "/usr/bin/ipmitool"
  interval: "60s"
  timeout: "10s"

#profile_monitoring::telegraf::outputs:
#  influxdb:
#    npcf-influxdb-collector:
#      <<: *telegraf_outputs_influxdb_common
#      urls:
#        - "https://npcf-influxdb.ncsa.illinois.edu:8086"
#    ncsa-influxdb-collector:
#      <<: *telegraf_outputs_influxdb_common
#      urls:
#        - "https://ncsa-influxdb.ncsa.illinois.edu:8086"
profile_monitoring::telegraf_ping_check::content: |
  [[inputs.ping]]
    urls = [
    ]
    count = 5,
    interval = "1m"
profile_monitoring::telegraf_ping_check::count: 5
profile_monitoring::telegraf_ping_check::interval: "2m"
profile_monitoring::telegraf_sslcert_check::content: |
  [[inputs.x509_cert]]
    sources = [
    ]
    interval = "3h"
profile_monitoring::telegraf_sslcert_check::interval: "3h"
profile_monitoring::telegraf_website_check::content: |
  [[inputs.http_response]]
    urls = [
    ]
    interval = "1m"
profile_monitoring::telegraf_website_check::interval: "5m"
